Creating a regular expression

let re1 = new RegExp("abc");
let re2 = /abc/;

What is a Regular Expression?
A regular expression is a sequence of characters that defines a search pattern. 
It can be used to find, match, and manipulate text.

both are same

/abc/ -> .....abc..... -> ....represent that ... can be any characters

Special Characters->

1.(.) dot -> Matching any single character except newline
    const regex = /a.c/;
    console.log(regex.test("abc")); // true
    console.log(regex.test("a c")); // true
    console.log(regex.test("ac")); // false

2.(*) astrisk ->  match any number of prceding element or may be zero
    const regex = /ab*c/;
    console.log(regex.test("ac")); // true
    console.log(regex.test("abc")); // true
    console.log(regex.test("abbbc")); // true

3.(+) plus -> match one or more of the preceding element
    const regex = /ab+c/;
    console.log(regex.test("ac")); // false
    console.log(regex.test("abc")); // true
    console.log(regex.test("abbbc")); // true

4.(?) question mark -> Matches zero or one of the preceding element.
    const regex = /ab?c/;
    console.log(regex.test("ac")); // true
    console.log(regex.test("abc")); // true
    console.log(regex.test("abbc")); // false

5.(\) backslash -> escapes special character 
    const regex = /a\+c/;
    console.log(regex.test("a+c")); // true
    console.log(regex.test("abc")); // false
    console.log(regex.test("a-c")); // false

    To match +  we put \+

6.([]) character set -> [abc] matches anyone of the characters a,b,c;
    [a-z] matches from a to z based on ascii  value
    [^abc] -> matches any character that is not a ,b ,c 
    -> Or 1 true all true

7.(^) -> Anchors -> matches the start of the string
    const regex = /^abc/;
    console.log(regex.test("abcdef")); // true
    console.log(regex.test("defabc")); // false

8.($) -> Anchors -> matches end of the string
    const regex = /abc$/;
    console.log(regex.test("defabc")); // true
    console.log(regex.test("abcdef")); // false


In JavaScript, you can create regular expressions in two ways: using regex literals or the RegExp constructor.

Example-> 
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    console.log(emailRegex.test("user@example.com")); // true
    console.log(emailRegex.test("userexample.com")); // false

    / ^[^\s@]+@[^\s@]+\.[^\s@]+$ /
    / matching anything /
    
    ^:

This asserts the position at the start of the string. It ensures that the match must occur at the beginning of the input.
[^\s@]+:

This matches one or more characters that are not a space (\s) or an @ character.
[^...] is a negated character class. It matches any character not inside the brackets.
\s matches any whitespace character (spaces, tabs, line breaks).
@ is just the @ character.
+ means "one or more of the preceding element."
@:

This matches the literal @ character. It ensures that the part before the @ is matched by the previous part.
[^\s@]+:

This is the same as the earlier [^\s@]+ and matches one or more characters that are not a space or an @ character. This part matches the domain part before the dot (.).
\.:

This matches the literal dot (.) character. The backslash \ escapes the dot, as the dot has a special meaning in regex (matching any character).
[^\s@]+:

This again matches one or more characters that are not a space or an @ character. This part matches the domain extension after the dot (e.g., com, net).
$:

This asserts the position at the end of the string. It ensures that the match must occur at the end of the input.


\d	Any digit character
\w	An alphanumeric character (“word character”)
\s	Any whitespace character (space, tab, newline, and similar)
\D	A character that is not a digit
\W	A nonalphanumeric character
\S	A nonwhitespace character
.	Any character except for newline


let dateTime = /\d\d-\d\d-\d\d\d\d \d\d:\d\d/;
console.log(dateTime.test("01-30-2003 15:20"));
// → true
console.log(dateTime.test("30-jan-2003 15:20"));
// → false


\d matches digit between 0-9;