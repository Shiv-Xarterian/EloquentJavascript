 A module is a piece of program that specifies which other pieces it relies on and which functionality it provides for other modules to use (its interface).

 const names = ["Sunday", "Monday", "Tuesday", "Wednesday",
               "Thursday", "Friday", "Saturday"];

export function dayName(number) {
  return names[number];
}
export function dayNumber(name) {
  return names.indexOf(name);
}

The export keyword can be put in front of a function, class, or binding definition to indicate that that binding is part of the module’s interface. This makes it possible for other modules to use that binding by importing it.

import {dayName} from "./dayname.js";
let now = new Date();
console.log(`Today is ${dayName(now.getDay())}`);
// → Today is Monday

When you run a module, all the other modules it depends on—and the modules those depend on—are loaded, and the exported bindings are made available to the modules that import them.

import {dayName as nomDeJour} from "./dayname.js";
console.log(nomDeJour(3));
// → Wednesday

-> Giving local Name


A module may also have a special export named default, which is often used for modules that only export a single binding.

export default ["Winter", "Spring", "Summer", "Autumn"];
import seasonNames from "./seasonname.js"; -> Can remove brackets

import * as dayName from "./dayname.js";
console.log(dayName.dayName(3));
// → Wednesday
-> TO Import all the bindings from a module

Package->
A package is a chunk of code that can be distributed (copied and installed). It may contain one or more modules and has information about which other packages it depends on.


Initially, people just manually wrapped their entire module in an “immediately invoked function expression” to create the module’s scope and assigned their interface objects to a single global variable.

const weekDay = function() {
  const names = ["Sunday", "Monday", "Tuesday", "Wednesday",
                 "Thursday", "Friday", "Saturday"];
  return {
    name(number) { return names[number]; },
    number(name) { return names.indexOf(name); }
  };
}();

console.log(weekDay.name(weekDay.number("Sunday")));
// → Sunday


CommonJS Modules
A CommonJS module looks like a regular script but has access to require and exports:

require: A function to load dependencies.
exports: An object to expose module's interface.

const ordinal = require("ordinal");
const { days, months } = require("date-names");

exports.formatDate = function(date, format) {
  return format.replace(/YYYY|M(MMM)?|Do?|dddd/g, tag => {
    if (tag == "YYYY") return date.getFullYear();
    if (tag == "M") return date.getMonth();
    if (tag == "MMMM") return months[date.getMonth()];
    if (tag == "D") return date.getDate();
    if (tag == "Do") return ordinal(date.getDate());
    if (tag == "dddd") return days[date.getDay()];
  });
};


Module Loader
A module loader wraps module code in a function, providing require and exports:

function require(name) {
  if (!(name in require.cache)) {
    let code = readFile(name);
    let exports = require.cache[name] = {};
    let wrapper = Function("require, exports", code);
    wrapper(require, exports);
  }
  return require.cache[name];
}
require.cache = Object.create(null);


The interface is the part of the module that’s visible to other modules, and the dependencies are the other modules it makes use of.